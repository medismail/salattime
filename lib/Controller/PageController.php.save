<?php
namespace OCA\SalatTime\Controller;

use OCP\IRequest;
use OCP\AppFramework\Http\TemplateResponse;
use OCP\AppFramework\Http\DataResponse;
use OCP\AppFramework\Http\RedirectResponse;
use OCP\AppFramework\Controller;
use OCA\SalatTime\AppInfo\Application;
use OCP\IConfig;
use OCP\IURLGenerator;
use OCA\SalatTime\CurrentUser;

class PageController extends Controller {
	private $userId;

        /** @var \OCP\IConfig */
        protected $config;

        /** @var string */
        protected $user;

        /** @var \OCP\IURLGenerator */
        protected $urlGenerator;

	public function __construct($AppName, IRequest $request, IConfig $config, IURLGenerator $urlGenerator, CurrentUser $currentUser, $UserId){
		parent::__construct($AppName, $request);
		$this->userId = $UserId;
                $this->config = $config;
                $this->user = (string) $currentUser->getUID();
                $this->urlGenerator = $urlGenerator;
	}

	/**
	 * CAUTION: the @Stuff turns off security checks; for this page no admin is
	 *          required and no CSRF check. If you don't know what CSRF is, read
	 *          it up in the docs or you might create a security hole. This is
	 *          basically the only required method to add this exemption, don't
	 *          add it to any other method if you don't exactly know what it does
	 *
	 * @NoAdminRequired
	 * @NoCSRFRequired
	 */
	public function index() {
                $p_settings = explode(":", $this->config->getUserValue($this->userId, Application::APP_ID, 'settings'));
                if (count($p_settings) == 3) {
                    $latitude = $p_settings['0'];
                    $longitude = $p_settings['1'];
                    $timezone = $p_settings['2'];
                } else {
                    $latitude = "";
                    $longitude = "";
                    $timezone = "";
                }
                $elevation = "";
                $method = "";
                if ($timezone == "") {
                    $timezone = $this->config->getUserValue($this->userId, 'core', 'timezone');
                     
                }
                $adjustments = explode(",", $this->config->getUserValue($this->userId, Application::APP_ID, 'adjustments'));
                if (count($adjustments) == 6) {
                    $day = $adjustments['0'];
                    $Fajr = $adjustments['1'];
                    $Dhuhr = $adjustments['2'];
                    $Asr = $adjustments['3'];
                    $Maghrib = $adjustments['4'];
                    $Isha = $adjustments['5'];
                } else {
                    $day = 0;
                    $Fajr = 0;
                    $Dhuhr = 0;
                    $Asr = 0;
                    $Maghrib = 0;
                    $Isha = 0;
                }
                $parameters = array('latitude' => $latitude, 'longitude' => $longitude, 'timezone' => $timezone, 'elevation' => $elevation, 'method' => $method,
                                      'day' => $day, 'Fajr' => $Fajr, 'Dhuhr' => $Dhuhr, 'Asr' => $Asr, 'Maghrib' => $Maghrib, 'Isha' => $Isha);
		return new TemplateResponse(Application::APP_ID, 'index', $parameters);  // templates/index.php
	}

         /**
         * @NoAdminRequired
         * @NoCSRFRequired
         */
        public function settings(): TemplateResponse {
                $templateName = 'settings';  // will use templates/settings.php
                $p_settings = explode(":", $this->config->getUserValue($this->userId, Application::APP_ID, 'settings'));
                if (count($p_settings) == 3) {
                    $latitude = $p_settings['0'];
                    $longitude = $p_settings['1'];
                    $timezone = $p_settings['2'];
                } else {
                    $latitude = "";
                    $longitude = "";
                    $timezone = "";
                }
                $elevation = "";
                $method = "";
                $parameters = array('latitude' => $latitude, 'longitude' => $longitude, 'timezone' => $timezone, 'elevation' => $elevation, 'method' => $method);
                return new TemplateResponse($this->appName, $templateName, $parameters);
        }

         /**
         * @NoAdminRequired
         * @NoCSRFRequired
         */
        public function prayertime(): RedirectResponse {
                $url = $this->urlGenerator->getAbsoluteURL('/apps/' . Application::APP_ID . '/');
                return new RedirectResponse($url);
        }
/*TemplateResponse {
                return $this->index();
        }*/

         /**
         * @param float $latitude
         * @param float $longitude
         * @param string $timezone
         *
         * @NoAdminRequired
         * @NoCSRFRequired
         */
        public function savesetting(float $latitude, float $longitude, string $timezone): RedirectResponse {
                /*if ($latitude != "")
                    $this->config->setUserValue($this->userId, Application::APP_ID, 'latitude', $latitude);
                if ($longitude != "")
                    $this->config->setUserValue($this->userId, Application::APP_ID, 'longitude', $longitude);
                if ($timezone != "")
                    $this->config->setUserValue($this->userId, Application::APP_ID, 'timezone', $timezone);*/
                $p_settings =  $latitude . ':' . $longitude . ':' . $timezone;
                $this->config->setUserValue($this->userId, Application::APP_ID, 'settings', $p_settings);
                $url = $this->urlGenerator->getAbsoluteURL('/apps/' . Application::APP_ID . '/');
                return new RedirectResponse($url);
        }


         /**
         * @NoAdminRequired
         * @NoCSRFRequired
         */
        public function adjustments(): TemplateResponse {
                $templateName = 'adjustments';  // will use templates/adjustments.php
                $adjustments = explode(",", $this->config->getUserValue($this->userId, Application::APP_ID, 'adjustments'));
                if (count($adjustments) == 6) {
                    $day = $adjustments['0'];
                    $Fajr = $adjustments['1'];
                    $Dhuhr = $adjustments['2'];
                    $Asr = $adjustments['3'];
                    $Maghrib = $adjustments['4'];
                    $Isha = $adjustments['5'];
                } else {
                    $day = 0;
                    $Fajr = 0;
                    $Dhuhr = 0;
                    $Asr = 0;
                    $Maghrib = 0;
                    $Isha = 0;
                }
                $parameters = array('day' => $day, 'Fajr' => $Fajr, 'Dhuhr' => $Dhuhr, 'Asr' => $Asr, 'Maghrib' => $Maghrib, 'Isha' => $Isha);
                return new TemplateResponse($this->appName, $templateName, $parameters);
        }

         /**
         * @param int $day
         * @param int $Fajr
         * @param int $Dhuhr
         * @param int $Asr
         * @param int $Maghrib
         * @param int $Isha
         *
         * @NoAdminRequired
         * @NoCSRFRequired
         */
        public function saveadjustment(int $day, int $Fajr, int $Dhuhr, int $Asr, int $Maghrib, int $Isha): RedirectResponse {
                if ($day == "")
                    $day = 0;
                if ($Fajr == "")
                    $Fajr = 0;
                if ($Dhuhr == "")
                    $Dhuhr = 0;
                if ($Asr == "")
                    $Asr = 0;
                if ($Maghrib == "")
                    $Maghrib = 0;
                if ($Isha == "")
                    $Isha = 0;
                $adjustments = $day . ',' . $Fajr . ',' . $Dhuhr . ',' . $Asr . ',' . $Maghrib . ',' . $Isha;
                $this->config->setUserValue($this->userId, Application::APP_ID, 'adjustments', $adjustments);
                $url = $this->urlGenerator->getAbsoluteURL('/apps/' . Application::APP_ID . '/');
                return new RedirectResponse($url);
        }

        private function get_lat_long($address){

                $	address = str_replace(" ", "+", $address);
                $json = file_get_contents("http://maps.google.com/maps/api/geocode/json?address=$address&sensor=false&region=$region");
                $json = json_decode($json);

                $lat = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
                $long = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};
                return $lat.','.$long;
        }
}
